=======
 Notes
=======

- Brazenly using 'couchdb' as the application name and module prefix. This
  might be off-putting. CouchDB uses 'couch' and we may cause confusion. The
  thinking, however, is that Erlang developers (the community that would likely
  care about namespace issues, aside from the CouchDB dev team) won't care
  about close collisions as they'll use the `couchdb` interface.

- couch_app starts a bunch of apps. This is typically handled elsewhere --
  usually when starting an Erlang release (dependecies are automatically
  started using dependencies in .app file).

- We want to keep the dependencies to a mininum, so not requiring oauth, ssl,
  ibrowse, and mochiweb (maybe others).

- Using application config to locate ini files.

- Not possible to start couch_server without config -- breaks in init/1 looking
  for "max_db_open" (no default vals). We'll cover for this using a hack in
  couchdb_sup. The general idea is that we should work with sensible defaults
  without any external config.

- couch_uuids:new/0 looks crufty - it's a gen_server call and not used. The
  server is never started by couch, so I'm guessing couch_uuids:random/0 is the
  correct function (but there are calls to new/0, possibly also not used).

- This has nothing to do with the project, but it's surprising that the content
  type for a json response over http is text/plain and not application/json.

  (Update - need to provide an accepts header to get the expected mime type.)

- delayed_commit is really a big deal - no lie. Docs/sec around 20 with it off,
  up to 280 with it on. Bulk writes bumped up to over 2000. These are all
  consistent with http://books.couchdb.org/relax/reference/high-performance.

- couch_db:delete_doc/3 doesn't work, probably not used anywhere.

- couch_icu_driver comes up when couch_util:collate/3 is called (e.g. new keys
  are added to a btree index).

- Borrowed heavily from hovercraft for the select support.

Services
--------

The "core" services we have are as small as possible to enable basic embedded
functions: db ops, doc ops, view queries. Everything else is moved into
"optional" services. This is currently completely trial and error.

We don't get *anywhere* without config and server. The db_update_event
service is needed for various operations and is non-optional.

Logging so far looks optional -- all of the events go into the ether if it's
not started.

httpd is needed as soon as you want to access CouchDB over REST calls or use
Futon. This *really* requires a correctly setup `ini` file -- nothing really
works without the right setup. (TODO: provide a minimal `ini.in` for using
Futon.)

uuids is used by Futon to generate IDs for new documents. We use the non proc
calls.

I'm not sure how far we can get without view or task_status. task_status is
started as a core service by CouchDB itself, though we've gotten this far
without it.

query_servers is used to manage support for map/reduce and is needed for views.

Services not addressed yet:

- couch_replication_server
- couch_external_manager
- couch_db_update_notifier_sup
- couch_stats_aggregator
- couch_stats_collector
- couch_auth_cache

HTTP Views
==========

Working:

 | /
 | _all_dbs
 | _config
 | _session
 | _utils
 | _uuids
 | /_active_tasks

Not tested:

 | _status
 | _log
 | _replicate (almost certainly doesn't work)
 | _oauth (surely not working)
